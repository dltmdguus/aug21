포인터가 무엇인가 ? 정의
c언어에서 포인터를 사용하는이유 ? 장점.. -> 
그렇다면 자바에서는 포인터가 왜 없을까?-> 
포인터가 있는 C언어 vs 포인터가 없는 자바의 장단점 
++포인터 사용방법/생김새 등등.... 

자바에서는 포인터가 왜 없을까? 이것을 설명하기위해 설명이 필요한것은 : 포인터와 참조(reference)의 차이 / 자바에서 가비지컬렉터의 동작원리 / 를설명하기위한 JVM 의 메모리영역과.. / 그중에서도 힙 영역의 동작원리



**포인터 ?
변수의 메모리 공간주소를 가리키는 변수를 말한다. 
포인터 변수는 메모리 상에 위치한 특정한 데이터의 주소 값을 저장하는 변수이다. 포인터가 가리키는 값을 가져오는 것을 역참조라고 한다.

**포인터를 사용하는 이유는 (장점)
유튜브 참조..
A 데이터의 크기가 100메가라고 치고 그 놈을 조만간 써야하는건 확실한데 언제 어느 타이밍에 써야할 지는 모르겠고...계속 들고다니긴 무거우니 이 놈 위치정보가 적혀있는 메모지 하나만 들고 다니다가 필요한 시간에 메모지 보고 A 데이터 있는 자리 가서 빠르게 들고 오는게 포인터
1. 시간 효율
값을 복사하는 것보다 메모리 주소만 복사하기 때문에 시간이 적게 걸린다.
2. 메모리 효율
메모리에 추가로 계속 저장하는 게 아니라 메모리 주소를 전달하기 때문에 메모리 효율성이 좋다. 참조 복사를 하면서 값을 복사하는 게 아님.

포인터가 존재하지 않는 것처럼 보이는 언어들(가령 자바나 스크립트언어들)은 추상화를 했을 뿐, 내부적으로는 포인터를 이용해 메모리 액세스를 한다. = 있는데 개발자에게 안보이게 해두었다.

그렇다면 자바에는 포인터가 왜 존재하지 않을까? <https://sorjfkrh5078.tistory.com/278>
(이것을 설명하기위해 설명해야하는것은 : 포인터와 참조(reference)의 차이 / 가비지컬렉터의 동작원리 / 를설명하기위한 JVM 의 메모리영역 / 그중에서도 힙 영역.)
포인터와 참조 모두 주소를 통해 원본 데이터에 접근하는 공통 기능을 가진다.
다만. 포인터는 메모리를 직접 핸들링(개발자가 메모리주소를 변경할수있음)할 수 있지만, 참조는 메모리를 직접 핸들링 할 수 없다(직접 메모리에 접근 불가능)는 차이점이 있다.
즉, 참조는 주소값을 변경할수없다. 

하지만, 만약 포인터를 개발자가 실수로 주소 값을 변경해버리면 segment fault 같은 문제가 발생할 가능성이 생기게 된다.
즉, 포인터를 사용하면 유연성과 성능을 향상시킬 수 있지만 안정성이 떨어지기 때문에 Java에서는 포인터라는 개념을 개발자에게 제공하지 않는다.

또한, JVM의 Garbage Collector의 동작 원리를 보면 포인터가 존재하면 안 되는 이유를 확인할 수 있다.
(C, C++은 개발자가 메모리를 직접 관리해야 하지만 Java에서는 개발자가 별도로 관리할 필요가 없이 JVM의 Garbage Collector에서 알아서 메모리를 관리해 준다.
가비지 컬렉터의 동작원리 <https://sorjfkrh5078.tistory.com/77?category=1007499>)
GC의 동작원리를 살펴보면 처음에 Eden 영역에 객체들이 저장되다가 Eden 영역이 꽉 차게 되면 UnReachable Object를 제거하고 살아남은 객체를 Survivor1 영역으로 옮기게 된다.

만약, Survivor1 영역이 다 차게 되면 Survivor2 영역으로 옮기게 되고, age를 기준으로 Old 영역으로 옮기게 된다.

즉, GC가 실행될 때마다 Heap 영역의 객체의 주소가 계속 바뀐다는 것을 알 수 있다.

만약 자바에서 포인터를 통해 주소를 직접 접근할 수 있다면 어떤 문제가 발생할까?
사용하고자 했던 객체의 주소가 100번지였는데 GC로 인해 200번지로 이동하였다고 하자. 다시 해당 객체를 사용하려고 하는데 개발자가 실수로 200번지가 아닌 201번지에 있는 객체를 접근했다고 하자.

전혀 상관없는 객체를 건드릴 수 있다는 것은 치명적인 오류를 발생시킬 수 있다.

하지만 참조로 접근한다면 주소가 변경되어도 원하는 객체에 보다 안전하게 접근할 수 있다.

사람은 언제나 실수할 수 있기 때문에 Java에서는 포인터를 통해 직접 주소를 접근하지 말고 참조를 통해 접근하도록 하여 안정성을 높인 것이다.

---------------------
그렇다면 포인터의 장점은 위에서 보았듯이 "메모리에 직접적으로 접근할 수 있다. " 로 인한 1. 시간 효율, 메모리 효율
단점은 : 위에 자바에서 포인터가 없는 이유와 같은,
메모리에 직접적으로 접근할 수 있으므로 사용자의 선택이 지배적이다. 즉, 아무렇게나 접근하여 잘못된 주소로 접근할 수 있다는 위험성이 있다. 

반대로 참조를 사용하여 자바처럼 포인터를 개발자가 사용하지 못하게 하는것의 장점은 위에서 말했듯이, 참조를 통해 접근하도록 하여 안정성을 높인 것. (보안적 측면에서 많은 안정성)
단점은 가비지 컬렉션에 의한 실행 지연 : 자동으로 가비지 컬랙션이 메모리를 자동으로 반환해주기때문에,  C/C++과 같은 메모리 최적화가 가능한 언어에 비해서는 속도가 느리다.